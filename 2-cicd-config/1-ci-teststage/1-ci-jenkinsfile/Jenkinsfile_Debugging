// ------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// FileName:     Jenkinsfile_CI
// FileType:     Text File using Declarative Pipeline syntax (based on Groovy programming language) 
// Author:       Rockwell Automation Engineering
// Created:      2024
// Description:  This script executes the example continuous integration pipeline for a CI/CD system used for Studio 5000 Logix Designer application development.
//
// ------------------------------------------------------------------------------------------------------------------------------------------------------------

pipeline {
    agent any // Uses any available agent (node).

	environment {
        PATH_JENKINS_GITHUB = "C:\\data\\jenkins_home\\workspace\\${env.JOB_NAME}\\"
        PATH_GEN_FILES_AND_REPORTS = "C:\\CI-Pipeline-Files\\"
        GITHUB_DEV_BRANCH = 'develop/datatype-bounds'
        GITHUB_RELEASE_BRANCH = 'release/v1.0.0'
        FINAL_TEST_RESULT = "PASS"
        GITHUB_USER_EMAIL = powershell(script: "git log -1 --pretty=format:'%ae'", returnStdout: true).trim()
        GITHUB_USER_NAME = powershell(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()
        GITHUB_COMMIT_HASH = powershell(script: "git log -1 --pretty=format:'%H'", returnStdout: true).trim()
        GITHUB_COMMIT_MSG = powershell(script: "git log -1 --pretty=format:'%s'", returnStdout: true).trim()
    }
	
    stages {
        stage('Debug') {
            steps {
                script {
						//bat 'git --version'
						def pathTest = "${env.GITHUB_USER_EMAIL}"
						echo "path Test1"
						echo "${pathTest}"
						echo "Path Test 2: ${pathTest}"
						//bat 'echo %GITHUB_USER_EMAIL%'
						//def pathOutput = powershell(script: 'echo $env:PATH', returnStdout: true).trim()
						//echo "PATH is: ${pathOutput}"
						//def pathOutput4 = powershell(script: "git log -1 --pretty=format:'%ae'", returnStdout: true).trim()
						//echo "git test: ${pathOutput4}"
					}
				}
            }
        } 
		
		stage('Test') {
            steps {
                createBanner('STAGE: Test')
                script {
                    def inputExcelWorkbooksFolderPath = "${env.PATH_JENKINS_GITHUB}2-cicd-config\\1-ci-teststage\\3-ci-inputexcelworkbooks"
                    def executable_filePath = "${env.PATH_JENKINS_GITHUB}2-cicd-config\\1-ci-teststage\\2-ci-unittestscript\\UnitTesting_ConsoleApp\\bin\\" +
                        "Release\\net8.0\\UnitTesting_ConsoleApp.exe"

                    // Get all file names in the specified folder
                    def excelFileNames = powershell(
                        script: "Get-ChildItem -Path ${inputExcelWorkbooksFolderPath} -Filter *.xlsx | Select-Object -ExpandProperty Name",
                        returnStdout: true
                    ).trim().split('\n')

                    // Loop through each excel workbook file name and execute the test script for each workbook. 
                    excelFileNames.each { fileName ->
                        bat(script: "@${executable_filePath} ${env.PATH_JENKINS_GITHUB} ${fileName.trim()} \"${env.GITHUB_USER_NAME}\" ${env.GITHUB_USER_EMAIL} " +
                            "\"${env.GITHUB_COMMIT_MSG}\" ${env.GITHUB_COMMIT_HASH} ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.PATH_GEN_FILES_AND_REPORTS}")

                        // Get the phrase "PASS" or "FAIL" from the final banner displayed in the text report.
                        testFinalResult = trimFinalTextReportBanner("${env.PATH_GEN_FILES_AND_REPORTS}1-textreports")

                        // Assign the test results value directly to FINAL_TEST_RESULT environment variable.
                        if (testFinalResult == "FAIL") {
                            FINAL_TEST_RESULT = testFinalResult
                        }
                    }
                }
            }
    }